#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers
source psql.sh

#=================================================
# LOAD SETTINGS
#=================================================

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get "$app" domain)
path_url="/"
is_public=$(ynh_app_setting_get "$app" is_public)
admin_email=$(ynh_app_setting_get "$app" admin_email)
final_path=$(ynh_app_setting_get "$app" final_path)
port=$(ynh_app_setting_get "$app" port)
db_name=$(ynh_app_setting_get "$app" psql_db)
db_pwd=$(ynh_app_setting_get "$app" psqlpwd)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set "$app" is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set "$app" is_public 0
	is_public=0
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

# Stop Peertube for upgrade
systemctl stop "$app"

#===================================================
# Add PostgreSQL extension for v1.0.0-beta.10.pre.1
#===================================================

ynh_psql_execute_as_root "\connect $db_name 
CREATE EXTENSION IF NOT EXISTS unaccent;CREATE EXTENSION IF NOT EXISTS pg_trgm;"

#=================================================
# REMOVE APP MAIN DIR
#=================================================

# Create a temporary directory
tmpdir="$(mktemp -d)"
# Backup the config file in the temp dir
cp -a "$final_path/config/local-production.json" "$tmpdir/local-production.json"
# Remove the app directory securely
ynh_secure_remove "$final_path"

# Define app's data directory
datadir="/home/yunohost.app/${app}/storage"
# Create app folders
mkdir -p "$datadir"

# Open this port
yunohost firewall allow Both "$port" 2>&1

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create "$app"

#=================================================
# INSTALL DEPENDENCIES
#=================================================

# install nodejs
ynh_install_nodejs 8

# add backports for Debian Jessie (required to install ffmpeg)
if [ "$(lsb_release --codename --short)" == "jessie" ]; then
	echo "deb http://httpredir.debian.org/debian jessie-backports main" | tee /etc/apt/sources.list.d/jessie-backports.list
fi

# add yarn repo for Debian
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
ynh_package_update

# install postgresql, ffmpeg, redis
ynh_install_app_dependencies postgresql postgresql-contrib openssl g++ ffmpeg redis-server redis-tools mailutils yarn apt-transport-https

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path "$path_url")

#=================================================
# DOWNLOAD, CHECK AND UNPACK PEERTUBE SOURCE
#=================================================

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"
cp ../conf/production.yaml "$final_path/config/production.yaml"

#Copy the admin saved settings from tmp directory to final path
cp -a  "$tmpdir/local-production.json" "$final_path/config/local-production.json"

# Remove the tmp directory securely
ynh_secure_remove "$tmpdir"

(
	cd "$final_path"
	yarn install --production --pure-lockfile 
)


#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

chown -R root:root   "$final_path"
chown -R "$app" "$datadir"

# Reload Nginx
systemctl reload nginx

#=================================================
# MODIFY A CONFIG FILE
#=================================================

ynh_replace_string "__domain__"  "$domain"      "$final_path/config/production.yaml"
ynh_replace_string "__db_name__" "$app"         "$final_path/config/production.yaml"
ynh_replace_string "__app__"     "$app"         "$final_path/config/production.yaml"
ynh_replace_string "__db_pwd__"  "$db_pwd"      "$final_path/config/production.yaml"
ynh_replace_string "__email__"   "$admin_email" "$final_path/config/production.yaml"
ynh_replace_string "__PORT__"    "$port"        "$final_path/config/production.yaml"


# Recalculate and store the config file checksum into the app settings
ynh_store_file_checksum "$final_path/config/production.yaml"

#=================================================
# SETUP LOGROTATE
#=================================================

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_replace_string "__ENV_PATH__" "$PATH" "../conf/systemd.service"
# Create a dedicated systemd config
ynh_add_systemd_config


# Set right permissions
chown -R "$app":"$app" "$final_path" "$datadir"


#=================================================
# SETUP SSOWAT
#=================================================

if [ "$is_public" -eq 0 ]
then	# Remove the public access
	ynh_app_setting_delete "$app" skipped_uris
fi
# Make app public if necessary
if [ "$is_public" -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set "$app" unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx
systemctl enable "$app"
systemctl start "$app"
# App needs time to start
sleep 30
