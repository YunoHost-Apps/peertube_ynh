#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
port=$(ynh_app_setting_get --app=$app --key=port)
rtmp_port=$(ynh_app_setting_get --app=$app --key=rtmp_port)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_user=$app
db_pwd=$(ynh_app_setting_get --app=$app --key=db_pwd)
datadir=$(ynh_app_setting_get --app=$app --key=datadir)
admin=$(ynh_app_setting_get --app=$app --key=admin)
admin_email=$(ynh_user_get_info --username=$admin --key="mail")

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	ynh_clean_check_starting
	# Restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..."

ynh_systemd_action --service_name=$app --action="stop" --log_path="systemd"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

ynh_app_setting_delete --app=$app --key=admin_pass
ynh_app_setting_delete --app=$app --key=admin_email

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name="peertube_${app}"
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If db_pwd doesn't exist, create it
if [ -z "$db_pwd" ]; then
	db_pwd=$(ynh_app_setting_get --app=$app --key=psqlpwd)
	ynh_app_setting_set --app=$app --key=db_pwd --value=$db_pwd
fi

if [ -z "$datadir" ];
then
	datadir="/home/yunohost.app/${app}/storage"
	ynh_app_setting_set --app=$app --key=datadir --value=$datadir
fi

# Close a port
if yunohost firewall list | grep -q "\- $port$"
then
	ynh_script_progression --message="Closing port $port"
	ynh_exec_warn_less yunohost firewall disallow TCP $port
fi

# Add PostgreSQL extension for v1.0.0-beta.10.pre.1
ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS unaccent;" --database=$db_name 
ynh_psql_execute_as_root --sql="CREATE EXTENSION IF NOT EXISTS pg_trgm;" --database=$db_name 

# Remove repository
ynh_secure_remove --file="/etc/apt/sources.list.d/jessie-backports.list"
ynh_secure_remove --file="/etc/apt/sources.list.d/yarn.list"

# Remove not needed checksum
ynh_delete_file_checksum --file="../conf/msg_install"

if [ -z "$rtmp_port" ];
then
	rtmp_port=1935
	ynh_port_available --port=$rtmp_port || ynh_die "Port $rtmp_port is needs to be available for this app"
	ynh_app_setting_set --app=$app --key=rtmp_port --value=$rtmp_port

	# Open the port
	ynh_script_progression --message="Configuring firewall..."
	ynh_exec_warn_less yunohost firewall allow TCP $rtmp_port
fi

# Cleaning legacy permissions
if ynh_legacy_permissions_exists; then
	ynh_legacy_permissions_delete_all

	ynh_app_setting_delete --app=$app --key=is_public
fi

# Create a permission if needed
if ! ynh_permission_exists --permission="api"; then
	ynh_permission_create --permission="api" --url="/api" --allowed="visitors" --auth_header="false" --show_tile="false" --protected="true"
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir=$final_path

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."

	# Create a temporary directory
	tmpdir="$(mktemp -d)"

	# Backup the config file in the temp dir
	cp -af "$final_path/config/production.yaml" "$tmpdir/production.yaml"
	if [ -s "$final_path/config/local-production.json" ]
	then
		cp -af "$final_path/config/local-production.json" "$tmpdir/local-production.json"
	fi

	# Remove the app directory securely
	ynh_secure_remove --file="$final_path"

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"

	#Copy the admin saved settings from tmp directory to final path	
	cp -af "$tmpdir/production.yaml" "$final_path/config/production.yaml"	

	if [ -s "$tmpdir/local-production.json" ]
	then
		cp -af "$tmpdir/local-production.json" "$final_path/config/local-production.json"
	else
		cp ../conf/local-production.json "$final_path/config/local-production.json"
	fi

	# Remove the tmp directory securely
	ynh_secure_remove --file="$tmpdir"
fi

chmod 750 "$final_path"
chmod -R o-rwx "$final_path"
chown -R $app:www-data "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..."

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..."

# Install nodejs
ynh_install_nodejs --nodejs_version=$NODEJS_VERSION

# Install dependencies
ynh_exec_warn_less ynh_install_app_dependencies $pkg_dependencies

# Install ffmpeg from backports for Debian Jessie and from main for others
if [ "$(lsb_release --codename --short)" == "jessie" ]; then
	ynh_install_extra_app_dependencies --repo="deb http://httpredir.debian.org/debian jessie-backports main" --package="ffmpeg"
else
	ynh_add_app_dependencies --package="ffmpeg"
fi

# Install Yarn
ynh_install_extra_app_dependencies --repo="deb https://dl.yarnpkg.com/debian/ stable main" --package="yarn" --key="https://dl.yarnpkg.com/debian/pubkey.gpg"

# Remove hook
ynh_secure_remove --file="/usr/share/yunohost/hooks/conf_regen/15-nginx_$app"
yunohost tools regen-conf nginx

#=================================================
# SPECIFIC UPGRADE
#=================================================
# CREATE DATA DIRECTORY
#=================================================
ynh_script_progression --message="Creating a data directory..."

mkdir -p $datadir

chmod 750 "$datadir/.."
chmod -R o-rwx "$datadir/.."
chown -R $app:www-data "$datadir/.."

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a config file..."

ynh_add_config --template="../conf/production.yaml" --destination="$final_path/config/production.yaml"

chmod 400 "$final_path/config/production.yaml"
chown $app:$app "$final_path/config/production.yaml"

chmod 600 "$final_path/config/local-production.json"
chown $app:$app "$final_path/config/local-production.json"

#=================================================
# BUILD YARN DEPENDENCIES
#=================================================
ynh_script_progression --message="Building Yarn dependencies..."

pushd "$final_path"
	ynh_use_nodejs
	ynh_exec_warn_less sudo -u $app env $ynh_node_load_PATH yarn install --production --pure-lockfile 
popd

#=================================================
# INSTALL LDAP PLUGIN
#=================================================
ynh_script_progression --message="Installing LDAP plugin..."

pushd "$final_path"
	ynh_exec_warn_less sudo -u $app env $ynh_node_load_PATH NODE_CONFIG_DIR="$final_path/config" NODE_ENV=production $ynh_npm run plugin:install -- --npm-name peertube-plugin-auth-ldap
popd

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..."

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..."

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."

yunohost service add $app --description="$app daemon for Peertube" --log="$datadir/logs/peertube.log" --needs_exposed_ports $rtmp_port

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..."

ynh_systemd_action --service_name=$app --action="start" --log_path="systemd" --line_match="HTTP server listening on localhost"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed"
